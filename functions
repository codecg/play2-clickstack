# -*-shell-script-*-

. "$genapp_functions/core"
. "$plugin_dir/java/functions"

create_app_skel() {
    echo "Creating application skeleton at $app_dir"
    chmod 770 $app_dir
    mkdir -m 770 $app_dir/tmp
    mkdir -m 770 $app_dir/log
    ln -s $log_dir/current $app_dir/log/current
}

install_app() {
    echo "Copying application files to $app_dir/app"
    mkdir $app_dir/app
    if [ -e "$pkg_dir/app.war" ]; then
      echo "WAR detected - using contents instead (CB legacy support)"
      unzip $pkg_dir/app.war -d $app_dir/app
    elif [ -e "$pkg_dir/app.ear" ]; then
      echo "EAR detected - using contents instead (CB legacy support)"
      unzip $pkg_dir/app.ear -d $app_dir/app
    else
      cp -a $pkg_dir/* $app_dir/app
    fi
    chmod -R g+w $app_dir/app
}

app_type() {
    if [ -e "app_dir/app/target/start" ]; then
	echo "stage"
    else
	echo "dist"
    fi
}

dist_working_dir() {
    _dir=`find $app_dir/app/* -type d -maxdepth 0 | grep -v META-INF`
    if [ `echo "$_dir" | wc -l` = "1" ]; then
	echo "$_dir"
    else
	echo "Invalid play dist - unexpected dir count in $app_dir/app" >&2
	exit 1
    fi
}

write_config() {
    _config="$control_dir/config"
    echo "Writing configuration to $_config"

    java=$(find_java)
    echo "Using JVM at $java"

    if [ app_type == "stage" ]; then
	working_dir="$app_dir/app"
	classpath="$working_dir/target/staged/*"
    else
	working_dir=$(dist_working_dir)
	classpath="$working_dir/lib/*"
    fi
    echo "Working dir is $working_dir"
    echo "Classpath is $classpath"

    echo "working=$app_dir/app" >> $_config
    echo "port=$app_port" >> $_config
    echo "java=$java" >> $_config
    echo "tmp_dir=$app_dir/tmp" >> $_config
    echo "working_dir=$working_dir" >> $_config
    echo "classpath=$classpath" >> $_config
}

write_control() {
    echo "Writing control scripts to $control_dir"
    install -m 550 $plugin_dir/control/start $control_dir
}
